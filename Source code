import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv("air_quality_data.csv")  # Replace with your dataset path

# Display basic info
print(df.head())

# Drop rows with missing values (or handle them differently)
df.dropna(inplace=True)

# Define features and target
X = df.drop(columns=["AQI"])  # AQI is the target column
y = df["AQI"]

# Split into train/test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)
rf_preds = rf_model.predict(X_test_scaled)

# Train XGBoost
xgb_model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
xgb_model.fit(X_train_scaled, y_train)
xgb_preds = xgb_model.predict(X_test_scaled)

# Evaluation
def evaluate(y_true, preds, model_name):
    print(f"\n{model_name} Results:")
    print("MSE:", mean_squared_error(y_true, preds))
    print("RÂ² Score:", r2_score(y_true, preds))
